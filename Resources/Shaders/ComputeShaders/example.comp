#version 450 core

struct Particle {
	vec3 position;
	vec3 velocity;
	float mass;

};


layout(std430, binding=0) buffer ParticleBuffer
{
    Particle particles[];
};

layout(local_size_x=512, local_size_y=1, local_size_z=1) in;


uniform float timestep;
uniform vec3 forceRadii;

// vec3 calculateForce(uint g_id, float actingMass, vec3 pos)
// {
// 	float dist = distance(pos, particles[g_id].position);
// 	float m = (actingMass * particles[g_id].mass) / dist;
// 	return (pos - particles[g_id].position) * m;
// }

void main()
{
	uint g_id = gl_GlobalInvocationID.x;
	vec3 pos = particles[g_id].position;
	vec3 vel =  particles[g_id].velocity;
	pos += vel * timestep;
	
	particles[g_id].position = pos;
}